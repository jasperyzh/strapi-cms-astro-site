---
// Debug page to check environment variables
// IMPORTANT: Remove this page before going to production!

// Expanded environment variables for detailed debugging
const envVars = {
  // Standard Astro env vars
  PUBLIC_STRAPI_URL: import.meta.env.PUBLIC_STRAPI_URL || 'Not defined',
  PUBLIC_STRAPI_URL_VALUE: import.meta.env.PUBLIC_STRAPI_URL, // Show actual value
  STRAPI_API_TOKEN_STATUS: import.meta.env.STRAPI_API_TOKEN ? 'Defined (value hidden)' : 'Not defined',
  STRAPI_API_TOKEN_LENGTH: import.meta.env.STRAPI_API_TOKEN ? `${import.meta.env.STRAPI_API_TOKEN.length} characters` : 'N/A',
  NODE_ENV: import.meta.env.NODE_ENV || 'Not defined',
  PROD: import.meta.env.PROD ? 'True' : 'False',
  DEV: import.meta.env.DEV ? 'True' : 'False',
  
  // Process env info
  MODE: import.meta.env.MODE || 'Not defined',
  BASE_URL: import.meta.env.BASE_URL || 'Not defined',
  
  // Server-side connection test results
  STRAPI_REACHABLE: 'Testing... (see bottom of page)',
};

// Check if request is authenticated (simple password protection)
const requestPassword = Astro.url.searchParams.get('key');
const isAuthorized = requestPassword === 'debug123'; // Change this to a secure password

// Only show environment variables if authorized
const showEnv = isAuthorized;

// Attempt to connect to Strapi if authorized
let strapiConnectionStatus = 'Not tested';
let strapiResponseDetails = 'No test performed';

if (isAuthorized) {
  try {
    const strapiUrl = import.meta.env.PUBLIC_STRAPI_URL || 'http://localhost:1337';
    const strapiToken = import.meta.env.STRAPI_API_TOKEN;
    
    const headers = {
      'Content-Type': 'application/json',
    };
    
    if (strapiToken) {
      headers['Authorization'] = `Bearer ${strapiToken}`;
    }
    
    const url = `${strapiUrl}/api/hero`;
    const response = await fetch(url, { headers });
    
    if (response.ok) {
      strapiConnectionStatus = 'SUCCESS ✅';
      const data = await response.json();
      strapiResponseDetails = `Status: ${response.status}\nData: ${JSON.stringify(data).substring(0, 100)}...`;
    } else {
      strapiConnectionStatus = 'FAILED ❌';
      strapiResponseDetails = `Status: ${response.status}\nStatusText: ${response.statusText}`;
    }
  } catch (error) {
    strapiConnectionStatus = 'ERROR ❌';
    strapiResponseDetails = `Error: ${error.message}`;
  }
  
  // Update the environment variable with the test result
  envVars.STRAPI_REACHABLE = strapiConnectionStatus;
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="robots" content="noindex, nofollow" />
    <title>Environment Debug</title>
    <style>
      body {
        font-family: system-ui, sans-serif;
        padding: 2rem;
        max-width: 800px;
        margin: 0 auto;
        line-height: 1.6;
      }
      h1 {
        color: #333;
        border-bottom: 2px solid #eee;
        padding-bottom: 0.5rem;
      }
      .warning {
        background-color: #fff3cd;
        color: #856404;
        padding: 1rem;
        border-radius: 0.25rem;
        margin-bottom: 1.5rem;
      }
      .env-var {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.25rem;
        margin-bottom: 1rem;
      }
      .env-name {
        font-weight: bold;
        color: #0066cc;
      }
      .env-value {
        font-family: monospace;
        background-color: #e9ecef;
        padding: 0.2rem 0.4rem;
        border-radius: 0.2rem;
        word-break: break-all;
      }
      pre.env-value {
        white-space: pre-wrap;
        max-height: 200px;
        overflow-y: auto;
      }
      .connection-test {
        margin-top: 2rem;
        border-top: 2px solid #eee;
        padding-top: 1rem;
      }
      .auth-form {
        background-color: #e9ecef;
        padding: 1.5rem;
        border-radius: 0.25rem;
        margin-top: 2rem;
      }
      input, button {
        padding: 0.5rem;
        margin-top: 0.5rem;
      }
      button {
        background-color: #0066cc;
        color: white;
        border: none;
        border-radius: 0.25rem;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <h1>Environment Variables Debug</h1>
    
    <div class="warning">
      <strong>Warning:</strong> This page displays sensitive configuration information.
      Remove this page before deploying to production or restrict access with proper authentication.
    </div>

    {showEnv ? (
      <div>
        <div>
          <h2>Environment Variables</h2>
          {Object.entries(envVars).map(([key, value]) => (
            <div class="env-var">
              <div class="env-name">{key}</div>
              <div class="env-value">{value}</div>
            </div>
          ))}
        </div>
        
        <div class="connection-test">
          <h2>Strapi Connection Test</h2>
          <div class="env-var">
            <div class="env-name">Connection Status</div>
            <div class="env-value">{strapiConnectionStatus}</div>
          </div>
          <div class="env-var">
            <div class="env-name">Response Details</div>
            <pre class="env-value">{strapiResponseDetails}</pre>
          </div>
        </div>
      </div>
    ) : (
      <div class="auth-form">
        <h2>Authentication Required</h2>
        <p>Enter the debug key to view environment variables:</p>
        <form method="get" action="">
          <div>
            <input type="password" name="key" placeholder="Debug key" />
          </div>
          <div>
            <button type="submit">Submit</button>
          </div>
        </form>
      </div>
    )}
  </body>
</html>
